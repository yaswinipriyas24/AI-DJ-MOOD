# -*- coding: utf-8 -*-
"""AI-Mood-DJ

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13mrHLpDkdLtPx9_fDZuXGG7wM_1jbTj1
"""

!pip install opencv-python spotipy

import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

# üîí Replace with your actual keys
client_id = '638aea3da732418ab28c8059483f23d1'
client_secret = '5c9ccd91c4304780a9bdef53a196a82f'

# Set up Spotify connection
auth_manager = SpotifyClientCredentials(client_id=client_id, client_secret=client_secret)
sp = spotipy.Spotify(auth_manager=auth_manager)

# ‚úÖ Test it: search for a song
results = sp.search(q='Imagine Dragons', limit=3)
for track in results['tracks']['items']:
    print(f"{track['name']} - {track['artists'][0]['name']}")

from google.colab import files
import cv2
import numpy as np
from matplotlib import pyplot as plt

# üìÅ Upload image
uploaded = files.upload()

# Get the filename of the uploaded image
filename = next(iter(uploaded))
print(f"Uploaded file: {filename}")

# üñºÔ∏è Read and display the image
image = cv2.imread(filename)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# üìä Show image
plt.imshow(image_rgb)
plt.axis('off')
plt.title("Uploaded Image")
plt.show()

from google.colab import files
import pandas as pd
import zipfile

uploaded = files.upload()  # Upload archive.zip when prompted

# Get the filename of the uploaded zip file
filename = next(iter(uploaded))
print(f"Uploaded file: {filename}")

with zipfile.ZipFile(filename, 'r') as zip_ref:
    # Assuming fer2013.csv is directly inside the zip or in a folder named 'fer2013' within the zip
    # If it's in a subfolder, adjust the path in read_csv accordingly.
    zip_ref.extractall(".")  # Extract to the current directory

import zipfile

with zipfile.ZipFile("archive (2).zip", 'r') as zip_ref:
    print("Contents of the ZIP file:")
    zip_ref.printdir()

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Define data generators
train_dir = "train"
test_dir = "test"

datagen = ImageDataGenerator(rescale=1./255)

train_generator = datagen.flow_from_directory(
    train_dir,
    target_size=(48, 48),
    color_mode='grayscale',
    class_mode='categorical',
    batch_size=64
)

test_generator = datagen.flow_from_directory(
    test_dir,
    target_size=(48, 48),
    color_mode='grayscale',
    class_mode='categorical',
    batch_size=64
)

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense

# Build the CNN model
model = Sequential()

# First conv layer
model.add(Conv2D(64, (3, 3), activation='relu', input_shape=(48, 48, 1)))
model.add(MaxPooling2D(pool_size=(2, 2)))

# Second conv layer
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

# Third conv layer
model.add(Conv2D(256, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

# Flatten and dense layers
model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(7, activation='softmax'))  # 7 output classes

# Compile model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Summary
model.summary()

# Train the model
history = model.fit(
    train_generator,
    validation_data=test_generator,
    epochs=20,
    verbose=1
)

model.save("emotion_model.h5")
print("‚úÖ Model saved!")

from google.colab import files
import cv2
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import IPython.display as display

# üéØ Upload image
uploaded = files.upload()
filename = next(iter(uploaded))

# üñºÔ∏è Load image
img_color = cv2.imread(filename)
img_gray = cv2.imread(filename, cv2.IMREAD_GRAYSCALE)

# ‚úÖ Validate image
if img_gray is None:
    print("‚ùå Error: Image not loaded. Please check file format or re-upload.")
else:
    # üëÄ Show uploaded image
    plt.imshow(cv2.cvtColor(img_color, cv2.COLOR_BGR2RGB))
    plt.axis('off')
    plt.title("Uploaded Image")
    plt.show()

    # üìê Preprocess image
    face = cv2.resize(img_gray, (48, 48)).reshape(1, 48, 48, 1) / 255.0

    # ü§ñ Predict emotion
    pred = model.predict(face)
    emotion_labels = ['Angry', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']
    predicted_emotion = emotion_labels[np.argmax(pred)]
    print("üòÉ Predicted Emotion:", predicted_emotion)

    # üìä Show prediction confidence
    plt.figure(figsize=(8, 4))
    sns.barplot(x=emotion_labels, y=pred[0])
    plt.title("Emotion Prediction Confidence")
    plt.ylim(0, 1)
    plt.show()

    # üé∂ Map emotion to Telugu music query
    emotion_to_telugu_query = {
        "Happy": "Telugu dance songs",
        "Sad": "Telugu heartbreak songs",
        "Angry": "Telugu action BGM",
        "Surprise": "Telugu surprise hit songs",
        "Fear": "Telugu thriller background music",
        "Disgust": "Telugu intense emotion songs",
        "Neutral": "Telugu melody songs"
    }

    music_query = emotion_to_telugu_query.get(predicted_emotion, "Telugu hits")
    print("üéß Music Query:", music_query)

    # üéµ Spotify Setup
    client_id = '638aea3da732418ab28c8059483f23d1'
    client_secret = '5c9ccd91c4304780a9bdef53a196a82f'

    sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(
        client_id=client_id, client_secret=client_secret))

    # üîç Search Spotify
    results = sp.search(q=music_query, type='track', limit=1)

    if results['tracks']['items']:
        track = results['tracks']['items'][0]
        name = track['name']
        artist = track['artists'][0]['name']
        preview_url = track['preview_url']
        spotify_url = track['external_urls']['spotify']

        print(f"üéµ Now Playing: {name} by {artist}")
        print(f"üîó Spotify Link: {spotify_url}")

        # ‚ñ∂Ô∏è Autoplay if preview available
        if preview_url:
            display.display(display.Audio(preview_url, autoplay=True))
        else:
            print("‚ö†Ô∏è No preview available for this track.")
    else:
        print("‚ùå No results found on Spotify.")